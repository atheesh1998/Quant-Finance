# -*- coding: utf-8 -*-
"""Black_Derman_Toy_IR_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zqbii_UWWNHhJIaL0xpw6RdoNzy5ylj6
"""

import pandas as pd
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt

"""**IMPORTING DATA FROM DRIVE**"""

# Importing data form the source directory in google drive
from google.colab import drive
drive.mount('/content/drive', force_remount=True)
data_dir = '/content/drive/MyDrive/RBS/Academic/SEM 1/Analysis of Fixed Income/FIXED INCOME NEW/MISC/ExtraCredit/'
data_file = 'Extra_Credit_Assignment_Data.xlsx'

"""**DATA PREPROCESSING**"""

xls = pd.ExcelFile(data_dir+data_file)

sigmas = pd.read_excel(xls, sheet_name='Sigmas', header=None, names=['Sigmas'])
new_row = pd.DataFrame({ 'Sigmas': [pd.NA] })
sigmas = pd.concat([new_row, sigmas], ignore_index=True)
sigmas = sigmas.head(30)

disc_facs = pd.read_excel(xls, sheet_name='D(T)', header=None, names=['D(T)'])

time_intervals = pd.DataFrame({'Time': [i * 0.5 for i in range(1, 31)]})

data = pd.concat([time_intervals, sigmas, disc_facs], axis=1)

data

"""**IMPLEMENTING THE BDT MODEL**"""

discount_factors = data['D(T)']
volatilities = data['Sigmas']
times = np.arange(0.5, 15.5, 0.5)

# Initial short rate
r_0_5 = -np.log(discount_factors[0]) / times[0]
rates = [r_0_5]

# Function to calculate the rate at the current node
def calculate_rate(previous_rate, sigma, D, T):
    # For the first vol value of NaN, the rate remains the same
    if np.isnan(sigma):
        return previous_rate

    def f(r):
        # Up and down rates
        r_u = previous_rate * np.exp(sigma * np.sqrt(T))
        r_d = previous_rate * np.exp(-sigma * np.sqrt(T))
        r_f = (r_u + r_d) / 2
        # Bond PV, discounted at the current rate
        bond_price = np.exp(-r * T)
        return bond_price - D

    rate = sp.optimize.fsolve(f, previous_rate)[0]
    return rate

# Loop to compute each subsequent rate and add to original dataframe
for i in range(1, len(times)):
    T = times[i]
    sigma = volatilities[i-1]
    D = discount_factors[i]
    new_rate = calculate_rate(rates[-1], sigma, D, T)
    rates.append(new_rate)

data['Rates'] = rates

data

for T, rate in zip(times, rates):
    print(f"For Time: {T} years, Rate: {rate:.4%}")

"""**FORWARD RATES**"""

forward_rates = []

for i in range(1, len(discount_factors)):
    # ‘m’ year loan that starts at time ‘n’ years from now
    n = times[i - 1]
    m = times[i] - times[i - 1]
    # Discount factors for the time intervals
    D_n = discount_factors[i - 1]
    D_nm = discount_factors[i]

    forward_rate = (D_n / D_nm - 1) / m
    forward_rates.append(forward_rate)

print('Forward Rates:')
for i, rate in enumerate(forward_rates, 1):
    print(f"f({times[i-1]}, {times[i]-times[i-1]}): {rate:.4%}")

"""**COMPARISON GRAPH**"""

times = np.arange(0.5, 15.5, 0.5)
rates = data['Rates']
forward_rates_full = [np.nan] + forward_rates

plt.figure(figsize=(12, 6))
plt.plot(times, rates, marker='o', label='Expected Short Rates')
plt.plot(times, forward_rates_full, marker='x', label='Forward Rates', linestyle='--')
plt.title('Comparison of Expected Short Rates and Forward Rates')
plt.xlabel('Time Horizon (Years)')
plt.ylabel('Rates')
plt.legend()
plt.grid(True)
plt.show()